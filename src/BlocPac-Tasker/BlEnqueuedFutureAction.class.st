Class {
	#name : #BlEnqueuedFutureAction,
	#superclass : #BlElementTask,
	#instVars : [
		'action',
		'resultCallbacks',
		'exceptionCallbacks',
		'element',
		'name'
	],
	#category : #'BlocPac-Tasker-Element Tasks'
}

{ #category : #accessing }
BlEnqueuedFutureAction >> action [
	^ action
]

{ #category : #accessing }
BlEnqueuedFutureAction >> action: anAction [
	action := anAction asAsyncFuture
]

{ #category : #accessing }
BlEnqueuedFutureAction >> element [
	<return: #BlElement>

	^ element
]

{ #category : #accessing }
BlEnqueuedFutureAction >> element: aBlElement [
	element := aBlElement
]

{ #category : #accessing }
BlEnqueuedFutureAction >> futureAction [
	^ self action
]

{ #category : #initialization }
BlEnqueuedFutureAction >> initialize [
	super initialize.
	self action: [ ].
	resultCallbacks := OrderedCollection new.
	exceptionCallbacks := OrderedCollection new.
]

{ #category : #accessing }
BlEnqueuedFutureAction >> name [
	^ name
]

{ #category : #accessing }
BlEnqueuedFutureAction >> name: anObject [
	name := anObject
]

{ #category : #hooks }
BlEnqueuedFutureAction >> onEnqueuedInElement: aBlElement [
	self element: aBlElement
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onFailureDo: aCallback [
	exceptionCallbacks add: aCallback
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onFailureEnqueueAction: aCallback [
	self onFailureDo: [ :aResult | 
		self element enqueueTask: ((BlTaskAction new 
			action: [ aCallback cull: aResult cull: self ]) 
				asBeaconLoggingTask maySetName: 'Failure Action') ]
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onFinishEnqueueAction: aCallback [
	self onFinishedDo: [ :aResultOrException | 
		self element enqueueTask: ((BlTaskAction new 
			action: [ aCallback cull: aResultOrException cull: self ]) 
				asBeaconLoggingTask maySetName: 'Finish Action') ]
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onFinishedDo: aCallback [
	self onSuccessDo: aCallback.
	self onFailureDo: aCallback.
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onSuccessDo: aCallback [
	resultCallbacks add: aCallback
]

{ #category : #'api - callbacks' }
BlEnqueuedFutureAction >> onSuccessEnqueueAction: aCallback [
	self onSuccessDo: [ :aResult | 
		self element enqueueTask: ((BlTaskAction new 
			action: [ aCallback cull: aResult cull: self ]) 
				asBeaconLoggingTask maySetName: 'Success Action') ]
]

{ #category : #'api - running' }
BlEnqueuedFutureAction >> run [

	promise := self runFuture.
	resultCallbacks do: [ :eachCallback | promise then: eachCallback ].
	exceptionCallbacks do: [ :eachCallback | 
		promise then: [  ] otherwise: eachCallback ]
]

{ #category : #'api - running' }
BlEnqueuedFutureAction >> runFuture [
	^ self action await
]
